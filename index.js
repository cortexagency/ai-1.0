// =========================
// CORTEX IA - INDEX.JS (v12 - Cancelaciones, Nombre, Email Notifs, Prompts Mejorados)
// =========================
require('dotenv').config();

const fs = require('fs');
const path = require('path');
const qrcode = require('qrcode');
const { Client, LocalAuth } = require('whatsapp-web.js');
const OpenAI = require('openai');
const { DateTime } = require('luxon');
const nodemailer = require('nodemailer');

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const TZ = process.env.TZ || 'America/Bogota';
const MAX_TURNS = 12;

// ======== Estado Global ========
const state = {};
let BOT_CONFIG = { ownerWhatsappId: null, ownerEmail: null };

// ======== GESTI√ìN PERSISTENTE ========
const DATA_DIR = path.join(__dirname, 'data');
const DEMO_RESERVAS_PATH = path.join(DATA_DIR, 'demo_reservas.json'); // Slots ocupados
const USER_BOOKINGS_PATH = path.join(DATA_DIR, 'user_bookings.json'); // Qui√©n reserv√≥ qu√©
const CONFIG_PATH = path.join(DATA_DIR, 'config.json'); // Configuraci√≥n del bot (due√±o)
let DEMO_RESERVAS = {}; // {'YYYY-MM-DD': ['H:MM AM/PM', ...]}
let USER_BOOKINGS = {}; // {'userId@c.us': [{id: string, fecha: 'YYYY-MM-DD', hora_inicio: 'H:MM AM/PM', servicio: '...', slots_usados: [...]}]}

// Asegurarse de que el directorio 'data' exista
if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR);

// --- Funciones de Carga/Guardado ---
function loadData(filePath, defaultData = {}) {
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(data);
    } else {
      fs.writeFileSync(filePath, JSON.stringify(defaultData, null, 2), 'utf8');
      console.log(`[Memoria] Archivo ${path.basename(filePath)} creado.`);
      return defaultData;
    }
  } catch (e) {
    console.error(`[Error Memoria] No se pudo cargar ${path.basename(filePath)}:`, e);
    return defaultData; // Retorna data por defecto en caso de error
  }
}

function saveData(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    // console.log(`[Memoria] Datos guardados en ${path.basename(filePath)}.`); // Opcional: log en cada guardado
  } catch (e) {
    console.error(`[Error Memoria] No se pudo guardar ${path.basename(filePath)}:`, e);
  }
}

function loadConfig() {
    BOT_CONFIG = loadData(CONFIG_PATH, { ownerWhatsappId: null, ownerEmail: null });
    // Asegurarse de que las propiedades existan post-carga
    if (!BOT_CONFIG.ownerWhatsappId) BOT_CONFIG.ownerWhatsappId = null;
    if (!BOT_CONFIG.ownerEmail) BOT_CONFIG.ownerEmail = null;
    console.log('[Memoria] Configuraci√≥n cargada.');
    if (!BOT_CONFIG.ownerWhatsappId) console.warn('[Advertencia Config] ownerWhatsappId no configurado. Usa /set owner.');
    if (!BOT_CONFIG.ownerEmail) console.warn('[Advertencia Config] ownerEmail no configurado. Usa /set email.');
    if (BOT_CONFIG.ownerWhatsappId) console.log(`[Config] Due√±o WhatsApp cargado: ${BOT_CONFIG.ownerWhatsappId}`);
    if (BOT_CONFIG.ownerEmail) console.log(`[Config] Due√±o Email cargado: ${BOT_CONFIG.ownerEmail}`);
}

function saveConfig() { saveData(CONFIG_PATH, BOT_CONFIG); }
function loadReservas() { DEMO_RESERVAS = loadData(DEMO_RESERVAS_PATH, {}); console.log('[Memoria] Reservas de demo cargadas.'); }
function saveReservas() { saveData(DEMO_RESERVAS_PATH, DEMO_RESERVAS); }
function loadUserBookings() { USER_BOOKINGS = loadData(USER_BOOKINGS_PATH, {}); console.log('[Memoria] Reservas de usuarios cargadas.'); }
function saveUserBookings() { saveData(USER_BOOKINGS_PATH, USER_BOOKINGS); }

// Cargar todo al iniciar
loadConfig();
loadReservas();
loadUserBookings();

// ======== DATOS DE LA DEMO (BARBER√çA LA 70) ========
const BARBERIA_DATA = { /* ... (Mismos datos de antes) ... */ };

// ======== PROMPT VENTAS (CORTEX IA - v12 Enfoque Humano/Valor) ========
const PROMPT_VENTAS = `
Eres Cortex IA, un asistente experto de Cortex Agency. Tu misi√≥n es **ayudar** a due√±os de negocios (barber√≠as, spas, u√±as) a **descubrir** c√≥mo pueden dejar de perder clientes y tiempo por no atender WhatsApp al instante. Hablas como un parcero colombiano: inteligente, emp√°tico, seguro y **muy humano**. Usas la escucha activa y preguntas clave.

**Tu Filosof√≠a (Inspirada en "To Sell is Human"):**
* **Vender es Ayudar:** No empujas un producto, ofreces una soluci√≥n a un dolor real (citas perdidas, estr√©s por responder). Tu meta es dejar al cliente *mejor* de lo que estaba.
* **Enf√≥cate en el Dolor (Incluso el Oculto):** El cliente sabe que pierde citas, pero quiz√°s no ha cuantificado el costo o el estr√©s. Ay√∫dalo a verlo.
* **S√© un Curador:** No listes funciones. Escucha su necesidad y presenta la caracter√≠stica *exacta* que la resuelve ("Si te escriben de noche, yo agendo por ti para que no pierdas esa cita").
* **Busca la Sinton√≠a (Attunement):** Ponte en sus zapatos. Valida sus preocupaciones ("Total, te entiendo...").

**== Flujo de Conversaci√≥n ==**
1.  **Saludo y Dolor:** "¬°Hey! üëã Soy Cortex IA. Muchos due√±os de negocios con los que hablo, como t√∫, me cuentan lo frustrante que es perder una cita solo por no ver el WhatsApp a tiempo... ¬øTe suena familiar esa situaci√≥n?" (Invita a compartir su experiencia).
2.  **Explora y Amplifica:** Si dice "s√≠" o cuenta algo: "Uf, total. Y fijo ese cliente se fue a otro lado, ¬øcierto? Es dinero y reputaci√≥n que se van. ¬øM√°s o menos cu√°ntas veces a la semana te pasa eso?" (Cuantifica el dolor). Muestra empat√≠a: "Imagino el estr√©s de estar trabajando y ver el celular sonar sin poder contestar...".
3.  **Presenta la Soluci√≥n (Curada):** "Mira, justo para eso estoy dise√±ado. Yo me encargo de responder al instante, 24/7, y agendar esas citas para que t√∫ te enfoques tranquilo en atender. ¬øTe gustar√≠a ver *c√≥mo* lo hago?"
4.  **Manejo de Objeciones (Con Empat√≠a y Valor):**
    * "Yo mismo respondo": "¬°Excelente! Eso habla bien de tu servicio. Pero, ¬øhas pensado cu√°nto tiempo te quita eso al d√≠a que podr√≠as usar para atender m√°s clientes o descansar? ¬øY qu√© pasa si te escriben mientras duermes? ¬øLa idea de delegar esa parte repetitiva para liberar tu tiempo tiene sentido?"
    * "No conf√≠an en bots": "Te entiendo perfecto, muchos bots suenan a robot. ¬øYo te sueno a robot ahora? üòâ La clave es sonar natural. Pero m√°s all√° de eso, ¬øcrees que un cliente prefiere esperar tu respuesta... o ser atendido al instante, incluso por un asistente, si resuelve su necesidad r√°pido?"
    * "Es caro": "Comprendo que el presupuesto es clave. Pero pensemos: si este sistema te asegura solo 3 o 4 citas *extra* al mes que hoy est√°s perdiendo... ¬øcu√°nto dinero es eso? Lo m√°s probable es que se pague solo muy r√°pido. ¬øTiene sentido verlo como una inversi√≥n que te trae m√°s clientes?"
5.  **Cierre (Demo como Prueba L√≥gica):** "La verdad, la mejor forma de que veas si esto te sirve es prob√°ndolo t√∫ mismo. Tengo una demo de barber√≠a lista. ¬øQuieres interactuar con ella como si fueras un cliente? Escribe /start test."
6.  **Flujo Post-Demo:**
    * Al volver (\`/end test\`): "¬°Demo finalizada! ¬øQu√© tal la experiencia? ¬øViste lo f√°cil que fue agendar? Si te gust√≥, el siguiente paso es dejar uno igualito funcionando en *tu* WhatsApp."
    * Si S√ç/ME GUST√ì/BRUTAL: "¬°Excelente! Ese es el objetivo: que recuperes tiempo y no pierdas ni un cliente m√°s. Para empezar a personalizar el tuyo, solo necesito un par de datos. ¬øAgendamos una llamada corta ma√±ana o te env√≠o la info por ac√°?"
    * Si OTRA COSA: "Entendido. No hay problema. ¬øQu√© dudas te quedaron? ¬øO prefieres ver c√≥mo funcionar√≠a con tus propios servicios y horarios en una llamada r√°pida?" (Sigue explorando, no abandones).
`;
const CTAs = [ /* ... (Mismos CTAs) ... */ ];
function pick(arr) { return arr[Math.floor(Math.random() * arr.length)]; }

// ======== PROMPT DEMO (BARBER√çA - v4 Pide Nombre + Post-Confirm Rule) ========
function getPromptDemoBarberia(slotsDisponibles) {
    const hoy = now().setLocale('es').toFormat('cccc d LLLL, yyyy'); const hoyDiaSemana = now().weekday; const serviciosTxt = Object.entries(BARBERIA_DATA.servicios).map(([k, v]) => `- ${k}: $${v.precio.toLocaleString('es-CO')} (${v.min} min)`).join('\n'); let slotsTxt = "Lo siento, no veo cupos disponibles en los pr√≥ximos 3 d√≠as. Preg√∫ntame por otra fecha."; if (slotsDisponibles && slotsDisponibles.length) { slotsTxt = slotsDisponibles.map(d => { const fechaFormateada = DateTime.fromISO(d.fecha).setLocale('es').toFormat('cccc d LLLL'); return `  - ${fechaFormateada} (${d.fecha}): ${d.horas.join(', ')}`; }).join('\n'); } let horarioHoy = BARBERIA_DATA.horario.festivos; if (hoyDiaSemana >= 1 && hoyDiaSemana <= 5) horarioHoy = BARBERIA_DATA.horario.lun_vie; else if (hoyDiaSemana === 6) horarioHoy = BARBERIA_DATA.horario.sab; else if (hoyDiaSemana === 7) horarioHoy = BARBERIA_DATA.horario.dom; return `
Eres el "Asistente Cortex Barbershop", IA de **${BARBERIA_DATA.nombre}**. Act√∫a como un humano: amable, profesional, eficiente, 100% colombiano (Medell√≠n). Tu objetivo es agendar citas y responder FAQs. NUNCA digas que eres demo. Hoy es ${hoy}.

== REGLAS DE AGENDAMIENTO Y HORARIOS ==
1.  **Calidez:** Saluda amablemente ("¬°Hola! Bienvenido a Barber√≠a La 70...") y pregunta qu√© necesita. S√© conversador.
2.  **Fechas:** Usa formatos amigables ("Martes 21 de Octubre").
3.  **Flujo:** 1. Pregunta **servicio**. 2. Di precio/duraci√≥n. 3. **PREGUNTA POR HORA DESEADA:** "¬øPara qu√© d√≠a y hora te gustar√≠a agendar?".
4.  **Manejo de Horarios:**
    * Si preguntan horario general: Da el horario del d√≠a ("Hoy Martes atendemos de ${horarioHoy}."). NO listes slots.
    * Si preguntan HORA ESPEC√çFICA ("¬ø4 PM?"): Revisa 'SLOTS DISPONIBLES'. Si S√ç: "¬°S√≠! A las 4 PM est√° libre. ¬øAgendamos?". Si NO: "Uy, 4 PM ya no est√°. ¬øTe sirve 4:20 PM o 4:40 PM?" (Ofrece 1-2 alternativas cercanas).
    * NUNCA listes > 3 slots seguidos. Prioriza la hora pedida.
5.  **PEDIR NOMBRE (CR√çTICO):** Despu√©s de que el cliente confirme la HORA (ej. dice "S√≠, a las 4:20 PM"), **DEBES** preguntar el nombre: "¬øPerfecto! ¬øA nombre de qui√©n agendo la cita?".
6.  **Confirmaci√≥n Final y Tag:** SOLO cuando tengas HORA CONFIRMADA y NOMBRE, responde con la confirmaci√≥n final + upsell, e INCLUYE la etiqueta invisible <BOOKING: {...}>.
    * La etiqueta DEBE tener: "servicio", "fecha", "hora_inicio", "slots_usados" (calculados: 30-40min=2, 50-60min=3, 90min=5), y "nombreCliente".
    * Ejemplo: <BOOKING: {"servicio": "corte clasico", "fecha": "2025-10-21", "hora_inicio": "9:00 AM", "slots_usados": ["9:00 AM", "9:20 AM"], "nombreCliente": "Zapata el Oso"}>
7.  **NO L√ìGICA INTERNA:** No digas "reservando slots".
8.  **NO INVENTAR REGLAS:** Usa solo la info del negocio.
9.  **CANCELACIONES:** Si el cliente dice "cancelar cita", "ya no puedo ir", etc., pregunta "¬øClaro, cu√°l cita deseas cancelar? ¬øLa de [fecha] a las [hora] para [servicio]?". Una vez confirmado, responde "Listo, tu cita ha sido cancelada." e incluye la etiqueta <CANCELLED: {"id": "bookingId"}> (El sistema te dar√° el bookingId cuando preguntes).
10. **POST-CONFIRMACI√ìN:** Tras confirmar (tag <BOOKING> enviado), solo ofrece el upsell. NO vuelvas a pedir nombre/hora.

== SLOTS DISPONIBLES (USO INTERNO) ==
${slotsTxt}

== INFO DEL NEGOCIO ==
Nombre: ${BARBERIA_DATA.nombre} Horario: Lun-Vie ${BARBERIA_DATA.horario.lun_vie}, S√°b ${BARBERIA_DATA.horario.sab}, Dom ${BARBERIA_DATA.horario.dom} (Hoy: ${horarioHoy}). Almuerzo 1-2 PM. Servicios: ${serviciosTxt} Direcci√≥n: ${BARBERIA_DATA.direccion} Pagos: ${BARBERIA_DATA.pagos.join(', ')} FAQs: ${BARBERIA_DATA.faqs.map(f => `- P: ${f.q}\n  R: ${f.a}`).join('\n')}
`;
}

// ======== Utilidades ========
function now() { return DateTime.now().setZone(TZ); }
// --- NLU Ligero ---
function detectServicio(text) { /* ... (Sin cambios) ... */ }
function detectHoraExacta(text) { /* ... (Sin cambios) ... */ }
function detectHoyOMa√±ana(text) { /* ... (Sin cambios) ... */ }
function detectCancelacion(text) { return /cancelar|cancela|no puedo ir|cambiar cita|reagendar/i.test(text); } // Simple detector
// --- C√°lculo de Slots Usados ---
function calcularSlotsUsados(horaInicio, durMin) { /* ... (Sin cambios) ... */ }

// ===== Gesti√≥n de Estado y Contexto =====
function ensureState(id) { /* ... (Sin cambios) ... */ }
function setState(id, s) { state[id] = s; }
function pushHistory(id, role, content) { /* ... (Sin cambios) ... */ }

// ===== Gesti√≥n de Reservas y Notificaciones =====
function parseRango(fecha, rango) { /* ... (Sin cambios) ... */ }

// *** NUEVO: Generar ID √∫nico para reservas ***
function generateBookingId() { return Math.random().toString(36).substring(2, 9); }

// *** MODIFICADO: addReserva ahora guarda en USER_BOOKINGS tambi√©n ***
async function addReserva(userId, fecha, hora_inicio, servicio, slots_usados = [], nombreCliente = "Cliente") {
  if (!DEMO_RESERVAS[fecha]) DEMO_RESERVAS[fecha] = [];
  let reservaNueva = false;
  let possibleConflict = false;

  // Verificar si alg√∫n slot ya est√° ocupado
  slots_usados.forEach(hora => {
      if (DEMO_RESERVAS[fecha].includes(hora)) {
          possibleConflict = true;
      }
  });

  if (possibleConflict) {
      console.warn(`[Advertencia Reserva] Conflicto detectado al intentar reservar ${servicio} a las ${hora_inicio} en ${fecha}. Slots: ${slots_usados.join(', ')}`);
      // Podr√≠amos decidir no guardar o manejar el conflicto de otra manera
      // Por ahora, lo guardaremos pero marcaremos que no es "nueva" para no notificar duplicado
      reservaNueva = false;
  } else {
      slots_usados.forEach(hora => {
          DEMO_RESERVAS[fecha].push(hora);
          console.log(`[Reserva Demo] Slot Ocupado: ${fecha} @ ${hora}`);
      });
      reservaNueva = true;
  }

  saveReservas(); // Guardar slots ocupados

  // Guardar la reserva del usuario si es nueva y no hay conflicto
  if (reservaNueva) {
    if (!USER_BOOKINGS[userId]) USER_BOOKINGS[userId] = [];
    const bookingId = generateBookingId();
    const newBooking = { id: bookingId, fecha, hora_inicio, servicio, slots_usados, nombreCliente };
    USER_BOOKINGS[userId].push(newBooking);
    saveUserBookings(); // Guardar la reserva espec√≠fica del usuario
    console.log(`[User Booking] Reserva guardada para ${userId}:`, newBooking);

    // Enviar notificaciones solo si es realmente nueva
    const notificationData = { ...newBooking }; // Enviar copia

    if (BOT_CONFIG.ownerWhatsappId) {
      try { await sendOwnerNotification(notificationData, 'new'); }
      catch (error) { console.error('[Error Notificaci√≥n WhatsApp] No se pudo enviar:', error); }
    }
    if (BOT_CONFIG.ownerEmail && process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD) {
       try { await sendOwnerEmailNotification(notificationData, 'new'); }
       catch (error) { console.error('[Error Notificaci√≥n Email] Fallo general al intentar enviar email.'); }
    }
  }
  return reservaNueva; // Devuelve true si se guard√≥ una reserva nueva
}

// *** NUEVO: removeReserva para cancelaciones ***
async function removeReserva(userId, bookingId) {
    if (!USER_BOOKINGS[userId]) return false; // Usuario no tiene reservas

    const bookingIndex = USER_BOOKINGS[userId].findIndex(b => b.id === bookingId);
    if (bookingIndex === -1) return false; // Reserva no encontrada

    const bookingToRemove = USER_BOOKINGS[userId][bookingIndex];
    const { fecha, slots_usados } = bookingToRemove;

    // Liberar slots en DEMO_RESERVAS
    if (DEMO_RESERVAS[fecha]) {
        DEMO_RESERVAS[fecha] = DEMO_RESERVAS[fecha].filter(slot => !slots_usados.includes(slot));
        if (DEMO_RESERVAS[fecha].length === 0) delete DEMO_RESERVAS[fecha]; // Limpiar si el d√≠a queda vac√≠o
        saveReservas();
        console.log(`[Reserva Demo] Slots liberados para ${fecha}: ${slots_usados.join(', ')}`);
    }

    // Eliminar reserva del usuario
    USER_BOOKINGS[userId].splice(bookingIndex, 1);
    if (USER_BOOKINGS[userId].length === 0) delete USER_BOOKINGS[userId]; // Limpiar si el usuario queda sin reservas
    saveUserBookings();
    console.log(`[User Booking] Reserva ${bookingId} eliminada para ${userId}`);

    // Notificar al due√±o sobre la cancelaci√≥n
    const notificationData = { ...bookingToRemove }; // Enviar copia

    if (BOT_CONFIG.ownerWhatsappId) {
      try { await sendOwnerNotification(notificationData, 'cancelled'); }
      catch (error) { console.error('[Error Notificaci√≥n Cancelaci√≥n WhatsApp] No se pudo enviar:', error); }
    }
    if (BOT_CONFIG.ownerEmail && process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD) {
       try { await sendOwnerEmailNotification(notificationData, 'cancelled'); }
       catch (error) { console.error('[Error Notificaci√≥n Cancelaci√≥n Email] Fallo general al intentar enviar email.'); }
    }

    return true; // Cancelaci√≥n exitosa
}


// *** MODIFICADO: Notificaciones ahora incluyen nombre y tipo (nueva/cancelada) ***
async function sendOwnerNotification(bookingData, type = 'new') {
  const ownerId = BOT_CONFIG.ownerWhatsappId;
  if (!ownerId) { /* ... (warning) ... */ return; }
  const fechaFormateada = DateTime.fromISO(bookingData.fecha).setLocale('es').toFormat('cccc d LLLL');
  let message;
  if (type === 'new') {
      message = `üîî *¬°Nueva Cita Agendada!* üîî\n\nCliente: *${bookingData.nombreCliente || 'No especificado'}*\nServicio: *${bookingData.servicio}*\nFecha: *${fechaFormateada}*\nHora: *${bookingData.hora_inicio}*\n\n_(Agendada por Cortex IA)_`;
  } else if (type === 'cancelled') {
      message = `‚ùå *¬°Cita Cancelada!* ‚ùå\n\nCliente: *${bookingData.nombreCliente || 'No especificado'}*\nServicio: *${bookingData.servicio}*\nFecha: *${fechaFormateada}*\nHora: *${bookingData.hora_inicio}*\n\n_(Cancelada a trav√©s de Cortex IA)_`;
  } else {
      return; // Tipo no reconocido
  }
  await client.sendMessage(ownerId, message).catch(err => { console.error(`[Error Notificaci√≥n WhatsApp] Fallo al enviar a ${ownerId}:`, err); });
}

async function sendOwnerEmailNotification(bookingData, type = 'new') {
  const ownerEmail = BOT_CONFIG.ownerEmail;
  const senderEmail = process.env.GMAIL_USER;
  const senderPassword = process.env.GMAIL_APP_PASSWORD;
  if (!ownerEmail || !senderEmail || !senderPassword) { /* ... (warnings/errors) ... */ return; }

  let transporter = nodemailer.createTransport({ host: 'smtp.gmail.com', port: 465, secure: true, auth: { user: senderEmail, pass: senderPassword }, connectionTimeout: 10000 });
  const fechaFormateada = DateTime.fromISO(bookingData.fecha).setLocale('es').toFormat('cccc d LLLL');
  let subject;
  let body;

  if (type === 'new') {
      subject = `Nueva Cita Agendada: ${bookingData.servicio} - ${fechaFormateada}`;
      body = `<h2>üîî ¬°Nueva Cita Agendada! üîî</h2><p>Cliente: <strong>${bookingData.nombreCliente || 'No especificado'}</strong></p><ul><li><strong>Servicio:</strong> ${bookingData.servicio}</li><li><strong>Fecha:</strong> ${fechaFormateada}</li><li><strong>Hora:</strong> ${bookingData.hora_inicio}</li></ul><hr><p><em>Agendada por Cortex IA.</em></p>`;
  } else if (type === 'cancelled') {
      subject = `Cita Cancelada: ${bookingData.servicio} - ${fechaFormateada}`;
      body = `<h2>‚ùå ¬°Cita Cancelada! ‚ùå</h2><p>Cliente: <strong>${bookingData.nombreCliente || 'No especificado'}</strong></p><ul><li><strong>Servicio:</strong> ${bookingData.servicio}</li><li><strong>Fecha:</strong> ${fechaFormateada}</li><li><strong>Hora:</strong> ${bookingData.hora_inicio}</li></ul><hr><p><em>Cancelada a trav√©s de Cortex IA.</em></p>`;
  } else {
      return; // Tipo no reconocido
  }

  try {
    let info = await transporter.sendMail({ from: `"Cortex IA Notificaciones" <${senderEmail}>`, to: ownerEmail, subject: subject, html: body });
    console.log(`[Notificaci√≥n Email ${type === 'new' ? 'Nueva' : 'Cancelada'}] Enviada a ${ownerEmail}. ID: ${info.messageId}`);
  } catch (error) {
    console.error(`[Error Email ${type === 'new' ? 'Nueva' : 'Cancelada'}] Fallo al enviar a ${ownerEmail}:`, error);
    // Ya no hacemos throw error;
  }
}

function generarSlotsDemo(diasAdelante = 3) { /* ... (Sin cambios) ... */ }

// ======== WHATSAPP CLIENT ========
const client = new Client({
  authStrategy: new LocalAuth({
      dataPath: path.join(__dirname, 'data', 'session')
  }),
  puppeteer: {
    headless: true,
    // *** A√ëADIR RUTA EXPL√çCITA AL CHROMIUM INSTALADO ***
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      // '--single-process', // Mantenlo comentado por ahora
      '--disable-gpu',
      '--disable-extensions'
    ],
  },
});

// ======== LLAMADA SEGURA A OPENAI (CON RETRY) ========
async function safeChatCall(payload, tries = 2) { /* ... (Sin cambios) ... */ }

// ======== HANDLER MENSAJES ========
client.on('message', async (msg) => {
  try {
    const from = msg.from; // ID del usuario: numero@c.us
    const text = (msg.body || '').trim();
    const low = text.toLowerCase();

    const s = ensureState(from);
    pushHistory(from, 'user', text);

    // --- Comandos Administrativos ---
    if (low.startsWith('/set owner ')) { /* ... (L√≥gica corregida de antes) ... */ }
    if (low.startsWith('/set email ')) { /* ... (L√≥gica de antes) ... */ }
    if (low === '/clear reservas demo') { /* ... (L√≥gica de antes) ... */ }
    // --- Fin Comandos Admin ---

    // 2. BOT ON/OFF
    if (low === '/bot off') { /* ... (L√≥gica de antes) ... */ }
    if (low === '/bot on') { /* ... (L√≥gica de antes) ... */ }
    if (!s.botEnabled) return;

    // 3. TEST DEMO on/off
    if (low === '/start test') { /* ... (L√≥gica de antes) ... */ }
    if (low === '/end test') { /* ... (L√≥gica de antes) ... */ }

    // 4. ===== MODO DEMO: BARBER√çA =====
    if (s.mode === 'barberia') {
      const isCancellation = detectCancelacion(text);

      // --- Manejo de Cancelaci√≥n ---
      if (isCancellation) {
          const userBookings = USER_BOOKINGS[from] || [];
          if (userBookings.length === 0) {
              const reply = "Parece que no tienes ninguna cita agendada conmigo para cancelar. ¬øNecesitas algo m√°s?";
              pushHistory(from, 'assistant', reply); setState(from, s); return msg.reply(reply);
          } else if (userBookings.length === 1) {
              // Si solo tiene una, confirma y cancela
              const booking = userBookings[0];
              const fechaFmt = DateTime.fromISO(booking.fecha).setLocale('es').toFormat('cccc d');
              // Pregunta para confirmar, incluye el ID en el contexto para la IA
              const reply = `Ok, veo tu cita para *${booking.servicio}* el *${fechaFmt} a las ${booking.hora_inicio}*. ¬øConfirmas que quieres cancelarla? (Responde S√ç o NO)`;
              // Podr√≠amos a√±adir l√≥gica m√°s robusta aqu√≠ o dejar que la IA maneje la confirmaci√≥n
              // Por simplicidad, pasamos el ID a la IA para que lo use en la etiqueta <CANCELLED>
              s.ctx.bookingToCancel = booking.id; // Guardar ID en contexto
              setState(from, s);
              pushHistory(from, 'assistant', reply); return msg.reply(reply);
          } else {
              // Si tiene varias, pide especificar (la IA deber√≠a manejar esto)
              const citasStr = userBookings.map((b, i) => `${i+1}. ${b.servicio} (${DateTime.fromISO(b.fecha).setLocale('es').toFormat('cccc d')} ${b.hora_inicio})`).join('\n');
              const reply = `Veo que tienes varias citas agendadas:\n${citasStr}\n¬øCu√°l de ellas quieres cancelar? (Dime el n√∫mero o detalles)`;
              pushHistory(from, 'assistant', reply); setState(from, s); return msg.reply(reply);
          }
      }

      // Si la IA responde con una etiqueta <CANCELLED: {"id": "bookingId"}>
      const cancellationMatch = text.match(/<CANCELLED:\s*({.*?})\s*>/); // OJO: Lo busca en el MENSAJE DEL USUARIO (asumiendo que la IA le pidi√≥ confirmar y el usuario dijo S√ç + tag)
      // *** ESTA L√ìGICA DE CANCELACI√ìN DEBER√çA ESTAR EN LA RESPUESTA DE LA IA, NO EN EL MENSAJE DEL USUARIO ***
      // *** VAMOS A DEJAR QUE LA IA MANEJE LA CONFIRMACI√ìN Y PONGA EL TAG EN *SU* RESPUESTA ***

      // --- Flujo Normal (Agendamiento o Preguntas) ---
      const servicioDetectado = detectServicio(text);
      const horaDetectada = detectHoraExacta(text);
      const offset = detectHoyOMa√±ana(text);
      const pideHorarioGeneral = /horario|horas|hasta que hora|a que horas|disponibilidad/i.test(low) && !horaDetectada && !servicioDetectado;

      if (pideHorarioGeneral) { /* ... (Misma l√≥gica de antes) ... */ }

      s.ctx.lastServicio = servicioDetectado || s.ctx.lastServicio;
      setState(from, s);

      const slots = generarSlotsDemo(3);
      const promptSystem = getPromptDemoBarberia(slots);
      // A√±adir contexto sobre posible cancelaci√≥n si aplica
      if (s.ctx.bookingToCancel) {
          promptSystem += `\n\nContexto Adicional: El usuario acaba de pedir cancelar una cita. Le preguntaste si confirma la cancelaci√≥n de la cita con ID ${s.ctx.bookingToCancel}. Si responde "S√ç", debes responder "Listo, cita cancelada." e incluir la etiqueta <CANCELLED: {"id": "${s.ctx.bookingToCancel}"}>. Si dice "NO" o pregunta otra cosa, olvida la cancelaci√≥n y contin√∫a normal.`;
      }
      const messages = [ { role: 'system', content: promptSystem }, ...s.history.slice(-MAX_TURNS) ];

      const completion = await safeChatCall({ model: 'gpt-4o-mini', messages, max_tokens: 350 });
      let reply = completion.choices?.[0]?.message?.content?.trim() || 'No te entend√≠ bien, ¬øqu√© servicio necesitas?';

      // --- Analizar Respuesta de IA para BOOKING o CANCELLED ---
      const bookingMatch = reply.match(/<BOOKING:\s*({.*?})\s*>/);
      const cancelledMatch = reply.match(/<CANCELLED:\s*({.*?})\s*>/);

      if (bookingMatch && bookingMatch[1]) {
        let bookingData = null;
        try { bookingData = JSON.parse(bookingMatch[1]); } catch (e) { console.error('Error parseando JSON de booking (IA):', e.message); }
        // Fallback si la IA olvid√≥ slots_usados o nombreCliente
        if (bookingData) {
            if (!bookingData.slots_usados || bookingData.slots_usados.length === 0) {
               const servicio = bookingData.servicio || s.ctx.lastServicio; const dur = servicio && BARBERIA_DATA.servicios[servicio.toLowerCase()]?.min;
               if(bookingData.hora_inicio && dur) { bookingData.slots_usados = calcularSlotsUsados(bookingData.hora_inicio, dur); console.log("[Fallback Booking] Slots calculados:", bookingData.slots_usados); }
            }
            if (!bookingData.nombreCliente) {
                // Intentar extraer nombre del historial reciente si la IA lo olvid√≥
                const nameHistory = s.history.slice(-3).find(h => h.role === 'user' && h.content.split(' ').length <= 3 && h.content.split(' ').length >= 1);
                bookingData.nombreCliente = nameHistory ? nameHistory.content : "Cliente"; // Fallback simple
                console.log("[Fallback Booking] Nombre cliente deducido:", bookingData.nombreCliente);
            }
        }
        if (bookingData?.fecha && bookingData?.hora_inicio && bookingData?.servicio && bookingData?.slots_usados?.length > 0) {
          await addReserva( from, bookingData.fecha, bookingData.hora_inicio, bookingData.servicio, bookingData.slots_usados, bookingData.nombreCliente );
          reply = reply.replace(/<BOOKING:.*?>/, '').trim();
          console.log(`[Reserva Demo Detectada y Guardada]`, bookingData);
          s.history = []; // Limpiar historial post-reserva
          s.ctx = { lastServicio: null, lastHorasSugeridas: [] }; // Limpiar contexto tambi√©n
        } else if (bookingMatch) {
           console.warn("[Advertencia Booking] Tag BOOKING detectado pero incompleto:", bookingData || bookingMatch[1]);
           reply = reply.replace(/<BOOKING:.*?>/, '').trim();
        }
      } else if (cancelledMatch && cancelledMatch[1]) {
          let cancelData = null;
          try { cancelData = JSON.parse(cancelledMatch[1]); } catch(e) { console.error('Error parseando JSON de cancelled (IA):', e.message); }
          if (cancelData?.id) {
              const cancelled = await removeReserva(from, cancelData.id);
              if (cancelled) {
                  reply = reply.replace(/<CANCELLED:.*?>/, '').trim(); // Limpiar tag
                  console.log(`[Cancelaci√≥n Demo] Reserva ${cancelData.id} cancelada por ${from}`);
                  s.history = []; // Limpiar historial post-cancelaci√≥n
                  s.ctx = { lastServicio: null, lastHorasSugeridas: [], bookingToCancel: null }; // Limpiar contexto
              } else {
                  console.warn(`[Advertencia Cancelaci√≥n] ID ${cancelData.id} no encontrado para usuario ${from}`);
                  reply = "Hubo un problema al intentar cancelar. Parece que esa cita ya no existe."; // Respuesta de fallback
              }
          } else {
             console.warn("[Advertencia Cancelaci√≥n] Tag CANCELLED detectado pero sin ID:", cancelledMatch[1]);
             reply = reply.replace(/<CANCELLED:.*?>/, '').trim(); // Limpiar tag
          }
          // Limpiar el ID de cancelaci√≥n pendiente del contexto en cualquier caso
          s.ctx.bookingToCancel = null;
      } else {
           // Si no hubo booking ni cancelaci√≥n, pero est√°bamos esperando confirmaci√≥n de cancelaci√≥n, limpiar el estado
           if(s.ctx.bookingToCancel) s.ctx.bookingToCancel = null;
      }
      // --- Fin An√°lisis Respuesta IA ---

      pushHistory(from, 'assistant', reply);
      setState(from, s);
      await msg.reply(reply);
      return;
    }

    // 5. ===== MODO SHOWROOM (VENTAS) =====
    if (s.mode === 'cortex') { /* ... (Sin cambios aqu√≠, ya estaba mejorado) ... */ }

  } catch (error) {
    console.error('****** ¬°ERROR DETECTADO! ******\n', error, '\n*******************************');
    if (msg && typeof msg.reply === 'function') { try { await msg.reply('Ups, algo sali√≥ mal. Int√©ntalo de nuevo.'); } catch (replyError) { console.error('Error al enviar mensaje de error:', replyError); } } else { console.error('No se pudo enviar mensaje de error (msg inv√°lido).'); }
  }
});

process.on('unhandledRejection', (reason, promise) => { console.error('Unhandled Rejection:', reason); });
client.initialize().catch(err => { console.error("ERROR AL INICIALIZAR CLIENTE:", err); });